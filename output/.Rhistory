abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1)
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1)
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 25")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1)
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1)
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 18")
nRows = 4; nCols = 4
simName = "fourByFour"
dataDir = paste0(outputDir, "/fourByFour")
dat1 = readNetCdfToArrays(dataDir, simName, nRows, nCols)
year = 1
image(dat1[[1]][year, , ])
(df = dat1[[2]][[year]])
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 1 * log(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
year = 1000
image(dat1[[1]][year, , ])
(df = dat1[[2]][[year]])
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 1 * log(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 1 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
sizeFactor = 2.5
dim(dat1[[1]])
ani.options(interval = 0.015, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1)
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1)
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 18")
ani.options(interval = 0.015, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1)
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1)
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 25")
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
col = gray(0.1)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1), col = gray(0.1))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1), col = 2)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.5, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.5, alpha = 0.7))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.5, alpha = 1 ))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = 1)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 25, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = 1)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 24, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = 1)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 24, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 25, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 26, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 27, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 20, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
warnings()
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 20, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.1))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
ani.options(interval = 0.015, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
ani.options(interval = 0.015, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1)
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1)
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 25")
dat1 = readNetCdfToArrays(dataDir, simName, nRows, nCols)
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
year
year = 2000
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0.2, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0.2, alpha = 0.2))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0.5, alpha = 0.2))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(1, alpha = 0.2))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(1, alpha = 0.5))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(1, alpha = 0.5))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 1))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
ani.options(interval = 0.015, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_2.mp4", other.opts = "-c:v mpeg4 -preset ultrafast -crf 27")
nRows = 4; nCols = 4
simName = "fourByFour"
dataDir = paste0(outputDir, "/fourByFour")
dat1 = readNetCdfToArrays(dataDir, simName, nRows, nCols)
year = 1000
image(dat1[[1]][year, , ])
(df = dat1[[2]][[year]])
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 1 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
ani.options(interval = 1 / 33, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
ani.options(interval = 1 / 33, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
dim(dat1[[1]])[3]
sizeFactor = 5
dim(dat1[[1]])
ani.options(interval = 1 / 33, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
dataDir = paste0(outputDir, "/", simName)
dat1 = readNetCdfToArrays(dataDir, simName, nRows, nCols)
year = 1000
image(dat1[[1]][year, , ])
(df = dat1[[2]][[year]])
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 1 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
dim(dat1[[1]])
nRows = 4; nCols = 5
simName = "fourByFive"
dataDir = paste0(outputDir, "/", simName)
dat1 = readNetCdfToArrays(dataDir, simName, nRows, nCols)
year = 1000
image(dat1[[1]][year, , ])
(df = dat1[[2]][[year]])
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 1 * sqrt(df$val + 1), xlim = c(0, 1), ylim = c(0, 1))
ani.options(interval = 1 / 33, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
sizeFactor = 10
dim(dat1[[1]])
ani.options(interval = 1 / 33, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * sqrt(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFive_circles.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
sizeFactor = 20
dim(dat1[[1]])
ani.options(interval = 1 / 33, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFive_circles.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.5))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 1))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 1))
ani.options(interval = 1 / 20, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
# df = dat1[[2]][[year]]
# par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 1))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 1))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFive_pixels.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 27")
nRows = 4; nCols = 4
simName = "fourByFour"
dataDir = paste0(outputDir, "/fourByFour")
dat1 = readNetCdfToArrays(dataDir, simName, nRows, nCols)
year = 1000
image(dat1[[1]][year, , ])
(df = dat1[[2]][[year]])
dim(dat1[[1]])
sizeFactor = 4
dim(dat1[[1]])
ani.options(interval = 1 / 24, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
# df = dat1[[2]][[year]]
# par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 1))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 1))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 30")
ani.options(interval = 1 / 24, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 30")
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 21, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
ani.options(interval = 1 / 20, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 35")
saveVideo(expr = {
for(year in 1:(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4", other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35")
ani.options(interval = 1 / 20, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1: 1){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -r 30 -pix_fmt yuv420p"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
for(year in 1: 10){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
saveVideo(expr = {
for(year in 1: 10){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -r 30 -crf = 18 -pix_fmt yuv420p"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
saveVideo(expr = {
for(year in 1: 10){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -crf = 18 -pix_fmt yuv420p"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
saveVideo(expr = {
for(year in 1: 10){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -r 30 -pix_fmt yuv420p"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
saveVideo(expr = {
for(year in 1: 10){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -r 30 -preset veryslow -crf 18 -pix_fmt yuv420p"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
saveVideo(expr = {
for(year in 1: 10){ #(dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -r 30 -preset veryslow -pix_fmt yuv420p -crf 18"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
sizeFactor = 5
dim(dat1[[1]])
ani.options(interval = 1 / 20, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1: (dim(dat1[[1]])[1] - 1)){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -r 30 -preset veryslow -pix_fmt yuv420p -crf 24"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
ani.options(interval = 1 / 29, ani.width = sizeFactor * (dim(dat1[[1]])[3]), ani.height = sizeFactor * (dim(dat1[[1]])[2]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
# for(year in 1: (dim(dat1[[1]])[1] - 1)){
for(year in 1: 20){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -preset veryslow -pix_fmt yuv420p -crf 24"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
saveVideo(expr = {
for(year in 1: (dim(dat1[[1]])[1] - 1)){
# for(year in 1: 20){
# par(mar = c(0, 0, 0, 0)); image(t(dat1[[1]][year , , ]), axes = F, zlim = c(-0.5, 1))
df = dat1[[2]][[year]]
par(mar = c(0, 0, 0, 0)); plot(df$x, df$y, cex = 2 * log(df$val + 1), pch = 22, xlim = c(0, 1), ylim = c(0, 1), col = 1, bg = gray(0.4, alpha = 0.2), lwd = 2)
par("usr" = c(0, 1, 0, 1))
# seq(par("usr")[1], par("usr")[2], length.out = nRows + 1)
abline(h = seq(par("usr")[1], par("usr")[2], length.out = nRows + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
abline(v = seq(par("usr")[3], par("usr")[4], length.out = nCols + 1), lwd = 0.1, col = gray(0, alpha = 0.2))
# mtext(side = 3, text = paste0("max val = ", max(datAll[year , , ])), line = -2)
print(paste0("year = ", year))
}
}, video.name = "fourByFour_squares_slow.mp4",
other.opts = " -c:v libx264 -strict -2 -c:a aac -ar 44100 -preset veryslow -pix_fmt yuv420p -crf 24"
# other.opts = "-c:v libx264 -c:a aac -preset veryslow -crf 35"
)
