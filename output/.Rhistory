for(year in 1:nyears){
dat1[year , , ] = dat1[year , , ] / maxVals[year]
}
min(maxVals)
tail(maxVals)
year = 300
par(mar = c(0, 0, 0, 0)); image(dat1[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = 0.5); abline( v = 0.5)
i = 3
# install.packages("ncdf4")
require(ncdf4)
require(animation)
p = "C:/github/MinimalModel/output"
if(dir.exists(p)) setwd(p)
filenames = c()
for(i in 0:1) for(j in 0:1) filenames = c(filenames, paste0("twoByTwo_row_", i, "_col_", j, ".nc"))
i = 1
dat = list()
for(i in 1:4){
ncf = nc_open(filenames[i])
dat[[i]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
nrows = dim(dat[[1]])[2]
ncols = dim(dat[[1]])[3]
nyears = dim(dat[[1]])[1] - 1
dat1 = array(0, dim = c(nyears, 2 * nrows, 2 * ncols))
maxVals = c()
for(year in 1:nyears){
dat1[year , , ] = cbind(
rbind(dat[[1]][year, , ], dat[[2]][year, , ]),
rbind(dat[[3]][year, , ], dat[[4]][year, , ]))
maxVals = c(maxVals, max(dat1[year , , ]))
}
for(year in 1:nyears){
dat1[year , , ] = dat1[year , , ] / maxVals[year]
}
min(maxVals)
tail(maxVals)
year = 300
par(mar = c(0, 0, 0, 0)); image(dat1[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = 0.5); abline( v = 0.5)
i = 3
# install.packages("ncdf4")
rm(list = ls())
require(ncdf4)
require(animation)
p = "C:/github/MinimalModel/output"
if(dir.exists(p)) outputDir = p
setwd(outputDir)
filenames = c()
paste0(dataDir, f"/fourByFive")
paste0(dataDir, "/fourByFive")
paste0(outputDir, "/fourByFive")
dataDir = paste0(outputDir, "/fourByFive")
nRows = 5; nCols = 4
simName = fourByFive
simName = "fourByFive"
nRows = 5; nCols = 4
paste0(simName,"_row_", 1:nRows)
paste0(paste0(simName,"_row_", 1:nRows), "_col_", 1:nCols)
paste0(rep(paste0(simName,"_row_", 1:nRows), each = nCols), "_col_", 1:nCols)
paste0(rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1))
flienames = paste0(rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1))
filenames = paste0(rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1))
filenames = paste0(rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1))
paste0(dataDir, "/", filenames)
paste0(dataDir, "/", filenames, ".nc")
filenames = paste0(dataDir, "/", rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1), ".nc")
filenames
for(filename in filenames){
ncf = nc_open(filename)
datNC = list(datNC, ncvar_get(ncf, "arrivingBeetles"))
nc_close(ncf)
}
datNC = list()
for(filename in filenames){
ncf = nc_open(filename)
datNC = list(datNC, ncvar_get(ncf, "arrivingBeetles"))
nc_close(ncf)
}
filenames
paste0(simName,"_row_", 0:(nRows - 1))
nRows = 4; nCols = 5
filenames = paste0(dataDir, "/", rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1), ".nc")
filenames
datNC = list()
for(filename in filenames){
ncf = nc_open(filename)
datNC = list(datNC, ncvar_get(ncf, "arrivingBeetles"))
nc_close(ncf)
}
dim(dat[[1]])
dim(datNC[[1]])
class(datNC[[1]])
str(datNC)
str(datNC, 1)
filenames
datNC = list()
for(i in lengthA(filenames)){
filename = filenames[i]
ncf = nc_open(filename)
datNC = list(datNC, ncvar_get(ncf, "arrivingBeetles"))
nc_close(ncf)
}
datNC = list()
for(i in length(filenames)){
filename = filenames[i]
ncf = nc_open(filename)
datNC = list(datNC, ncvar_get(ncf, "arrivingBeetles"))
nc_close(ncf)
}
class(datNC[[1]])
str(datNC, 1)
datNC = list()
for(i in length(filenames)){
filename = filenames[i]
ncf = nc_open(filename)
datNC[[i]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
class(datNC[[1]])
str(datNC, 1)
ncf = nc_open(filename)
ncf
datNC = list()
for(i in 1:length(filenames)){
filename = filenames[i]
ncf = nc_open(filename)
datNC[[i]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
class(datNC[[1]])
str(datNC, 1)
dataDims = dim(datNC[[1]])
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
year = 1; row = 1; col = 1
year = 1; row = 0; col = 0
(row * nRows) : ((row + 1) * nRows)
(row * dataDims[2]) : ((row + 1) * dataDims[2])
(row * dataDims[2]) : ((row + 1) * dataDims[2] - 1)
(row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
rows = (row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
(col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
cols = (col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
datAll[year, rows, cols]
count = 1
datNC[[count]][year , , ]
for(year in 1:(dataDims[1] - 0)){
count = 1
for(row in 0:(nRows - 1)) for(col in 0:(nCols - 1)){
rows = (row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
cols = (col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[count]][year , , ]
count = count + 1
}
}
image(datAll[1, , ])
image(datAll[100, , ])
maxVals = c()
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
maxVals = c()
year = 1; row = 0; col = 0
for(year in 1:(dataDims[1] - 0)){
count = 1
for(row in 0:(nRows - 1)) for(col in 0:(nCols - 1)){
rows = (row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
cols = (col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[count]][year , , ]
count = count + 1
}
maxVals = c(maxVals, max(datAll[year , , ]))
}
image(datAll[, , ])
image(datAll[2, , ])
image(datAll[222, , ])
maxVals
datAll[year, , ] = datAll[year, , ] / maxVals[year]
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
maxVals = c()
year = 1; row = 0; col = 0
for(year in 1:(dataDims[1] - 0)){
count = 1
for(row in 0:(nRows - 1)) for(col in 0:(nCols - 1)){
rows = (row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
cols = (col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[count]][year , , ]
count = count + 1
}
maxVals = max(datAll[year , , ])
datAll[year, , ] = datAll[year, , ] / maxVals
}
image(datAll[222, , ])
1 / nRows
(1 : (nRows - 1)) * (1 / nRows)
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(h = (1 : (nCols - 1)) * (1 / nCols))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
image(datAll[1222, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
ani.options(interval = 0.025, ani.width = sizeFactor * (dataDims[2]), ani.height = sizeFactor * (datDims[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
sizeFactor = 6
ani.options(interval = 0.025, ani.width = sizeFactor * (dataDims[2]), ani.height = sizeFactor * (datDims[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
ani.options(interval = 0.025, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:nyears){
par(mar = c(0, 0, 0, 0)); image(dat1[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = 0.5); abline( v = 0.5)
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
ani.options(interval = 0.025, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(dat1[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = 0.5); abline( v = 0.5)
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
sizeFactor = 6
ani.options(interval = 0.025, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = 0.5); abline( v = 0.5)
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
sizeFactor = 6
ani.options(interval = 0.025, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
readNetCdfToArrays = function(dataDir, simName, nRows, nCols){
filenames = paste0(dataDir, "/", rep(paste0(simName,"_row_", 0:(nRows - 1)), each = nCols), "_col_", 0:(nCols - 1), ".nc")
filenames
datNC = list()
for(i in 1:length(filenames)){
filename = filenames[i]
ncf = nc_open(filename)
datNC[[i]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
dataDims = dim(datNC[[1]])
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
maxVals = c()
year = 1; row = 0; col = 0
for(year in 1:(dataDims[1] - 0)){
count = 1
for(row in 0:(nRows - 1)) for(col in 0:(nCols - 1)){
rows = (row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
cols = (col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[count]][year , , ]
count = count + 1
}
maxVals = max(datAll[year , , ])
datAll[year, , ] = datAll[year, , ] / maxVals
}
return(datAll)
}
datAll = readNetCdfToArrays(dataDir = paste0(outputDir, "/fourByFour"),
simName = "fourByFour",
nRows = 4, nCols = 4)
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
nRows = 4; nCols = 4
simName = "fourByFour"
dataDir = paste0(outputDir, "/fourByFour")
datAll = readNetCdfToArrays(dataDir, simName, nRows, nCols)
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
sizeFactor = 10
ani.options(interval = 0.025, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
nRows = 4; nCols = 4
simName = "fourByFour"
dataDir = paste0(outputDir, "/fourByFour")
datAll = readNetCdfToArrays(dataDir, simName, nRows, nCols)
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
sizeFactor = 10
ani.options(interval = 0.025, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
datAll = readNetCdfToArrays(dataDir, simName, nRows, nCols)
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
sizeFactor = 10
ani.options(interval = 0.1, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
array(dim = c(nRows, nCols))
filenames = array(dim = c(nRows, nCols))
filenames[1,1] = "aaa"
filenames
for(row in 0:(nRows - 1)) for(col = 0:(nCols - 1)){
filenames[row, col] =  paste0(dataDir, "/", simName,"_row_", row, "_col_", col, ".nc")
}
for(row in 0:(nRows - 1)) for(col = 0:(nCols - 1)){
filenames[row, col] =  paste0(dataDir, "/", simName,"_row_", row, "_col_", col, ".nc")
}
for(row in 0:(nRows - 1)) for(col = 0:(nCols - 1)){
filenames[row, col] = paste0(
dataDir, "/", simName, "_row_", row, "_col_", col, ".nc")
}
filenames
filenames = array(dim = c(nRows, nCols))
for(row in 0:(nRows - 1)) for(col = 0:(nCols - 1)){
filenames[row, col] = paste0(
dataDir, "/", simName, "_row_", row, "_col_", col, ".nc")
}
filenames = array(dim = c(nRows, nCols))
for(row in 0:(nRows - 1)) for(col in 0:(nCols - 1)){
filenames[row, col] = paste0(
dataDir, "/", simName, "_row_", row, "_col_", col, ".nc")
}
filenames
filenames = array(dim = c(nRows, nCols))
for(row in 1:nRows) for(col in 1:nCols){
filenames[row, col] = paste0(
dataDir, "/", simName, "_row_", row - 1, "_col_", col - 1, ".nc")
}
filenames
datAll = array(dim = c(nRows, nCols, dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
filenames
datNC = list()
for(row in 1:nRows){
datCol = list()
for(col in 1:nCols){
filename = filenames[row, col]
ncf = nc_open(filename)
datCol[[i]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
datNC[[row]] = datCol
}
dataDims = dim(datNC[[1]])
dataDims = dim(datNC[[1]][[1]])
dataDims
str(datNC)
datNC = list()
for(row in 1:nRows){
datCol = list()
for(col in 1:nCols){
filename = filenames[row, col]
ncf = nc_open(filename)
datCol[[col]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
datNC[[row]] = datCol
}
str(datNC)
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
maxVals = c()
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
datAll = array(dims = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
dataDims = dim(datNC[[1]][[1]])
dataDims
datAll = array(dims = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
maxVals = c()
year = 1; row = 0; col = 0
for(year in 1:(dataDims[1] - 0)){
for(row in 0:(nRows - 1)) for(col in 0:(nCols - 1)){
rows = (row * dataDims[2]) : ((row + 1) * dataDims[2] - 1) + 1
cols = (col * dataDims[3]) : ((col + 1) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[row]][[col]][year , , ]
count = count + 1
}
maxVals = max(datAll[year , , ])
datAll[year, , ] = datAll[year, , ] / maxVals
}
for(year in 1:(dataDims[1] - 0)){
for(row in 1:(nRows - 0)) for(col in 1:(nCols - 0)){
rows = ((row - 1) * dataDims[2]) : ((row + 0) * dataDims[2] - 1) + 1
cols = ((col - 1) * dataDims[3]) : ((col + 0) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[row]][[col]][year , , ]
count = count + 1
}
maxVals = max(datAll[year , , ])
datAll[year, , ] = datAll[year, , ] / maxVals
}
return(datAll)
datAll
readNetCdfToArrays = function(dataDir, simName, nRows, nCols){
filenames = array(dim = c(nRows, nCols))
for(row in 1:nRows) for(col in 1:nCols){
filenames[row, col] = paste0(
dataDir, "/", simName, "_row_", row - 1, "_col_", col - 1, ".nc")
}
filenames
datNC = list()
for(row in 1:nRows){
datCol = list()
for(col in 1:nCols){
filename = filenames[row, col]
ncf = nc_open(filename)
datCol[[col]] = ncvar_get(ncf, "arrivingBeetles")
nc_close(ncf)
}
datNC[[row]] = datCol
}
str(datNC)
dataDims = dim(datNC[[1]][[1]])
datAll = array(dim = c(dataDims[1], nRows * dataDims[2], nCols * dataDims[3]))
year = 1; row = 0; col = 0
for(year in 1:(dataDims[1] - 0)){
for(row in 1:(nRows - 0)) for(col in 1:(nCols - 0)){
rows = ((row - 1) * dataDims[2]) : ((row + 0) * dataDims[2] - 1) + 1
cols = ((col - 1) * dataDims[3]) : ((col + 0) * dataDims[3] - 1) + 1
datAll[year, rows, cols] = datNC[[row]][[col]][year , , ]
count = count + 1
}
maxVals = max(datAll[year , , ])
datAll[year, , ] = datAll[year, , ] / maxVals
}
return(datAll)
}
nRows = 4; nCols = 4
simName = "fourByFour"
dataDir = paste0(outputDir, "/fourByFour")
datAll = readNetCdfToArrays(dataDir, simName, nRows, nCols)
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
datAll = readNetCdfToArrays(dataDir, simName, nRows, nCols)
image(datAll[552, , ])
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
sizeFactor = 10
ani.options(interval = 0.1, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
ani.options(interval = 0.5, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
ani.options(interval = 0.5, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "two_by_two.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
image(datAll[552, , ])
image(datAll[551, , ])
sizeFactor = 10
ani.options(interval = 0.5, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
ani.options(interval = 0.25, ani.width = sizeFactor * (dim(datAll)[2]), ani.height = sizeFactor * (dim(datAll)[3]), ffmpeg = "C:/Program Files/ffmpeg/bin/ffmpeg.exe")
saveVideo(expr = {
for(year in 1:(dim(datAll)[1])){
par(mar = c(0, 0, 0, 0)); image(datAll[year , , ], axes = F, zlim = c(-0.5, 1))
abline(h = (1 : (nRows - 1)) * (1 / nRows))
abline(v = (1 : (nCols - 1)) * (1 / nCols))
print(paste0("year = ", year))
}
}, video.name = "fourByFour.mp4", other.opts = "-c:v libx264 -preset ultrafast -crf 12")
image(datAll[51, , ])
image(datAll[1, , ])
